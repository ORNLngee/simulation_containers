# -------------------------------------------------------------------------------------------
#
# Ubuntu OS embeded scipy-notebook docker container for building ELM-PFLOTRAN
# compilers: gcc/openmpi
# python package manager: conda/mamba
# docker image: docker.io/yuanfornl/elmpf_baseos
#
# -------------------------------------------------------------------------------------------
#

## scipy-notebook from quay.io, which based on ubuntu linux OS. Current (2025-01-06): ubuntu-24.04, gcc-13.3
# FROM quay.io/jupyter/scipy-notebook:2025-01-06
#    note: (1) conda packages are installed /opt/conda
#          (2) python version: 3.12.8
#          (3) default user is: jovyan (i.e. /home/jovyan)
#         +(4) openmpi-4.1.x or openmpi-5.0.x and other linux tools/utilities for ELM/PFLOTRAN/OLMT, etc.

ARG BASEOS_TAG=gcc13_ompi418
FROM docker.io/yuanfornl/baseos_scipynb:${BASEOS_TAG}

LABEL maintainer.name="F.-M. Yuan" \
      maintainer.email="yuanf@ornl.gov" \
      author.name="Fengming Yuan" \
      author.email="yuanf@ornl.gov" \
      description="Ubuntu OS embeded scipy-notebook based images (gcc,python3, etc) + openmpi, loaded with necessary dependencies for building ELM-PFLOTRAN images"

USER root
    
## TPLs
# needs parallel versions of HDF5/netcdf4/petsc, which not available from debian (except for hdf5?)
# version args, which can be user-provided by '--build-arg ...=...'
ARG HDF5_MAJOR_VERSION=1.12
ARG HDF5_VERSION=1.12.1
ARG NETCDF_C_VERSION=4.8.1
ARG NETCDF_FORTRAN_VERSION=4.6.1
ARG PETSC_VERSION=3.20.6


# set path variables
ENV HDF5_DIR=/usr/local/tpls/netcdf-hdf5
ENV NETCDF_PATH=/usr/local/tpls/netcdf-hdf5
ENV PETSC_DIR=/usr/local/tpls/petsc

## HDF5, both parallel and serial builds
#https://support.hdfgroup.org/ftp/HDF5/releases/

RUN cd /home/$NB_USER \
    && mkdir -p ${HDF5_DIR} \
    && wget --no-check-certificate https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-${HDF5_MAJOR_VERSION}/hdf5-${HDF5_VERSION}/src/hdf5-${HDF5_VERSION}.tar.gz \
    && tar -xzf hdf5-${HDF5_VERSION}.tar.gz \
    && cd hdf5-${HDF5_VERSION} \
    && mkdir -p build \
    && cd build \
    && CC=mpicc FC=mpif90 ../configure --enable-fortran --enable-parallel --enable-static --enable-shared --prefix=${HDF5_DIR} \
    && make \
    && make install \
    && cd .. \
    && mkdir -p build2 \
    && cd build2 \
    && CC=gcc FC=gfortran ../configure --enable-fortran --disable-parallel --enable-static --enable-shared --prefix=${HDF5_DIR}-serial \
    && make \
    && make install \
    && cd /home/$NB_USER \
    && rm -r hdf5-${HDF5_VERSION} \
    && rm hdf5-${HDF5_VERSION}.tar.gz
ENV PATH=${HDF5_DIR}/bin:$PATH   
RUN cd /home/$NB_USER \
    && echo "export PATH=${HDF5_DIR}/bin:\$PATH">>/home/$NB_USER/.bashrc \
    && echo "export LD_LIBRARY_PATH=${HDF5_DIR}/lib:\$LD_LIBRARY_PATH">>/home/$NB_USER/.bashrc \
    && echo "">>/home/$NB_USER/.bashrc

## netCDF & netCDF-Fortran, both parallel and serial builds

RUN cd /home/$NB_USER \
    && mkdir -p ${NETCDF_PATH} \
    && wget --no-check-certificate https://downloads.unidata.ucar.edu/netcdf-c/${NETCDF_C_VERSION}/netcdf-c-${NETCDF_C_VERSION}.tar.gz \
    && tar -xzf netcdf-c-${NETCDF_C_VERSION}.tar.gz \
    && cd netcdf-c-${NETCDF_C_VERSION} \
    && mkdir -p build \
    && cd build \
    && CC=mpicc CPPFLAGS="-Dgfortran -I${HDF5_DIR}/include" CFLAGS=-I${HDF5_DIR}/include LDFLAGS=-L${HDF5_DIR}/lib \
       ../configure --enable-netcdf4 --enable-shared --disable-dap_remote_tests --prefix=${NETCDF_PATH} \
    && make \
    && make install \
    && cd .. \
    && mkdir -p build2 \
    && cd build2 \
    && CC=gcc CPPFLAGS="-Dgfortran -I${HDF5_DIR}-serial/include" CFLAGS=-I${HDF5_DIR}-serial/include LDFLAGS=-L${HDF5_DIR}-serial/lib \
       ../configure --enable-hdf5 --disable-parallel4 --enable-shared --disable-dap --disable-dap_remote_tests --prefix=${NETCDF_PATH}-serial \
    && make \
    && make install \
    && cd /home/$NB_USER \
    && rm -r netcdf-c-${NETCDF_C_VERSION} \
    && rm netcdf-c-${NETCDF_C_VERSION}.tar.gz
ENV PATH=${NETCDF_PATH}/bin:$PATH   
RUN cd /home/$NB_USER \
    && echo "export PATH=${NETCDF_PATH}/bin:\$PATH">>/home/$NB_USER/.bashrc \
    && echo "export LD_LIBRARY_PATH=${NETCDF_PATH}/lib:\$LD_LIBRARY_PATH">>/home/$NB_USER/.bashrc \
    && echo "">>/home/$NB_USER/.bashrc
       
RUN cd /home/$NB_USER \
    && wget --no-check-certificate https://downloads.unidata.ucar.edu/netcdf-fortran/${NETCDF_FORTRAN_VERSION}/netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz \
    && tar -xzf netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz \
    && cd netcdf-fortran-${NETCDF_FORTRAN_VERSION} \
    && mkdir -p build \
    && cd build \
    && CC=mpicc FC=mpif90 CPPFLAGS="-Dgfortran -I${NETCDF_PATH}/include -I${HDF5_DIR}/include" CFLAGS=$(nc-config --cflags) FCFLAGS=$(nc-config --cflags) LDFLAGS=$(nc-config --libs --static) LIBS="-L$HDF5_DIR/lib" \
    ../configure --prefix=${NETCDF_PATH} --enable-shared \
    && make \
    && make install \
    && cd .. \
    && mkdir -p build2 \
    && cd build2 \
    && CC=gcc FC=gfortran CPPFLAGS="-Dgfortran -I${NETCDF_PATH}-serial/include" CFLAGS=$(${NETCDF_PATH}-serial/bin/nc-config --cflags) FCFLAGS=$(${NETCDF_PATH}-serial/bin/nc-config --cflags) LDFLAGS=$(${NETCDF_PATH}-serial/bin/nc-config --libs --static) \
    ../configure --prefix=${NETCDF_PATH}-serial --enable-shared \
    && make \
    && make install \
    && cd /home/$NB_USER \
    && rm -r netcdf-fortran-${NETCDF_FORTRAN_VERSION} \
    && rm netcdf-fortran-${NETCDF_FORTRAN_VERSION}.tar.gz

# ELM building envs require 'NETCDF_PATH' or 'NETCDF_C_PATH, NETCDF_FORTRAN_PATH'
RUN cd /home/$NB_USER \
    && echo "export NETCDF_PATH=${NETCDF_PATH}">>/home/$NB_USER/.bashrc \
    && echo "export NETCDF_C_PATH=${NETCDF_PATH}">>/home/$NB_USER/.bashrc \
    && echo "export NETCDF_FORTRAN_PATH=${NETCDF_PATH}">>/home/$NB_USER/.bashrc

## PETSc
RUN cd /home/$NB_USER \
    && mkdir -p ${PETSC_DIR} \
    && wget --no-check-certificate https://web.cels.anl.gov/projects/petsc/download/release-snapshots/petsc-${PETSC_VERSION}.tar.gz \
    && tar -xzvf petsc-${PETSC_VERSION}.tar.gz \
    && cd petsc-${PETSC_VERSION} \
    && wget --no-check-certificate https://github.com/ORNLngee/simulation_containers/raw/master/docker/baseos/gcc_ompi/build_petsc-x.sh \
    && sh ./build_petsc-x.sh \
    && cd /home/$NB_USER \
    && rm -r petsc-${PETSC_VERSION} \
    && rm petsc-${PETSC_VERSION}.tar.gz

# PFLOTRAN building envs require 'PETSC_DIR'
RUN cd /home/$NB_USER \
    && echo "export PETSC_DIR=${PETSC_DIR}">>/home/$NB_USER/.bashrc
        
## need to change container user from 'root' back to 'jovyan' and ownership of /home/jovyan and /opt/conda. NOTE this is the default user of $NB_USER
RUN cd / \
    && chown $NB_USER -R /opt/conda
    
RUN cd / \
    && chown $NB_USER -R /home/$NB_USER
    
USER $NB_USER

    
### EOF
